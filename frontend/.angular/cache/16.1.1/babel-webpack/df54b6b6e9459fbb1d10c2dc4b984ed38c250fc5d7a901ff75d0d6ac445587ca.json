{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.authUrl = \"http://localhost:5000\";\n    this.isAuthenticated = new BehaviorSubject(false);\n    this.options = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    this.isAuthenticated.next(false);\n  }\n  login(username, password) {\n    return this.http.post(this.authUrl + \"/user-login\", {\n      username,\n      password\n    });\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  getIsAuthenticated() {\n    return this.isAuthenticated.asObservable();\n  }\n  setAuthenticated(token) {\n    if (token !== null) {\n      const userToken = this.DecodeToken(token);\n      console.log(userToken);\n      localStorage.setItem('token', token);\n      console.log(token);\n      this.isAuthenticated.next(true);\n    }\n  }\n  removeAuthentication() {\n    if (localStorage.getItem('token') !== null) {\n      window.localStorage.clear();\n      this.isAuthenticated.next(false);\n    }\n  }\n  register(user) {\n    return this.http.post(this.authUrl + \"/auth/register-user\", user, this.options);\n  }\n  DecodeToken(token) {\n    try {\n      return jwt_decode(token);\n    } catch (Error) {\n      return Error;\n    }\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","jwt_decode","AuthService","constructor","http","router","authUrl","isAuthenticated","options","headers","next","login","username","password","post","getToken","localStorage","getItem","getIsAuthenticated","asObservable","setAuthenticated","token","userToken","DecodeToken","console","log","setItem","removeAuthentication","window","clear","register","user","Error","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Georgie\\Desktop\\DevelopmentProjects\\FullStack\\MEAN\\movie4you\\frontend\\src\\app\\security\\auth-service.service.ts"],"sourcesContent":["import { HttpBackend, HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, map, observable, Observable, Subject } from 'rxjs';\nimport { tap } from 'rxjs';\nimport { User } from '../models/user';\nimport jwt_decode from 'jwt-decode';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private authUrl: string = \"http://localhost:5000\";\n\n  private isAuthenticated = new BehaviorSubject<boolean>(false);\n\n  private options = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(private http: HttpClient, private router: Router){\n    this.isAuthenticated.next(false);\n  }\n\n\n  login(username:string, password:string): Observable<any>{\n    return this.http.post<any>(this.authUrl + \"/user-login\", {username,password});\n  }\n\n  getToken(): any {\n    return localStorage.getItem('token');\n  }\n\n  getIsAuthenticated():Observable<boolean>{\n    return this.isAuthenticated.asObservable();\n  }\n\n  setAuthenticated(token: string){\n    if(token !==null){\n      const userToken = this.DecodeToken(token);\n      console.log(userToken);\n      localStorage.setItem('token', token);\n      console.log(token);\n      this.isAuthenticated.next(true);\n    }\n  }\n\n  removeAuthentication(){\n    if(localStorage.getItem('token') !==null){\n     window.localStorage.clear();\n     this.isAuthenticated.next(false);\n    }\n  }\n\n  register(user: User): Observable<any>{\n    return this.http.post<User>(this.authUrl + \"/auth/register-user\", user,this.options);\n  }\n\n  DecodeToken(token:string): any{\n    try{\n      return jwt_decode(token);\n    }catch(Error ){\n      return Error;\n    }\n  }\n}\n"],"mappings":"AAAA,SAAkCA,WAAW,QAAQ,sBAAsB;AAG3E,SAASC,eAAe,QAA8C,MAAM;AAG5E,OAAOC,UAAU,MAAM,YAAY;;;;AAKnC,OAAM,MAAOC,WAAW;EAUtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAR5C,KAAAC,OAAO,GAAW,uBAAuB;IAEzC,KAAAC,eAAe,GAAG,IAAIP,eAAe,CAAU,KAAK,CAAC;IAErD,KAAAQ,OAAO,GAAG;MAChBC,OAAO,EAAE,IAAIV,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;IAGC,IAAI,CAACQ,eAAe,CAACG,IAAI,CAAC,KAAK,CAAC;EAClC;EAGAC,KAAKA,CAACC,QAAe,EAAEC,QAAe;IACpC,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAM,IAAI,CAACR,OAAO,GAAG,aAAa,EAAE;MAACM,QAAQ;MAACC;IAAQ,CAAC,CAAC;EAC/E;EAEAE,QAAQA,CAAA;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAC,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACX,eAAe,CAACY,YAAY,EAAE;EAC5C;EAEAC,gBAAgBA,CAACC,KAAa;IAC5B,IAAGA,KAAK,KAAI,IAAI,EAAC;MACf,MAAMC,SAAS,GAAG,IAAI,CAACC,WAAW,CAACF,KAAK,CAAC;MACzCG,OAAO,CAACC,GAAG,CAACH,SAAS,CAAC;MACtBN,YAAY,CAACU,OAAO,CAAC,OAAO,EAAEL,KAAK,CAAC;MACpCG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;MAClB,IAAI,CAACd,eAAe,CAACG,IAAI,CAAC,IAAI,CAAC;;EAEnC;EAEAiB,oBAAoBA,CAAA;IAClB,IAAGX,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,KAAI,IAAI,EAAC;MACxCW,MAAM,CAACZ,YAAY,CAACa,KAAK,EAAE;MAC3B,IAAI,CAACtB,eAAe,CAACG,IAAI,CAAC,KAAK,CAAC;;EAEnC;EAEAoB,QAAQA,CAACC,IAAU;IACjB,OAAO,IAAI,CAAC3B,IAAI,CAACU,IAAI,CAAO,IAAI,CAACR,OAAO,GAAG,qBAAqB,EAAEyB,IAAI,EAAC,IAAI,CAACvB,OAAO,CAAC;EACtF;EAEAe,WAAWA,CAACF,KAAY;IACtB,IAAG;MACD,OAAOpB,UAAU,CAACoB,KAAK,CAAC;KACzB,QAAMW,KAAK,EAAE;MACZ,OAAOA,KAAK;;EAEhB;;AAtDW9B,WAAW,C;mBAAXA,WAAW,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAXpC,WAAW,C;SAAXA,WAAW;EAAAqC,OAAA,EAAXrC,WAAW,CAAAsC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}