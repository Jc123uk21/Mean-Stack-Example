{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst jwt = require('jsonwebtoken');\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.authUrl = \"http://localhost:3000\";\n    this.isAuthenticated = new BehaviorSubject(false);\n    this.options = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    this.isAuthenticated.next(false);\n  }\n  login(username, password) {\n    return this.http.post(this.authUrl + \"/login\", {\n      username,\n      password\n    }, this.options);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  getIsAuthenticated() {\n    return this.isAuthenticated.asObservable();\n  }\n  setAuthenticated(token) {\n    if (token !== null) {\n      const userToken = token;\n      console.log(userToken);\n      localStorage.setItem('token', token);\n      console.log(token);\n      this.isAuthenticated.next(true);\n    }\n  }\n  removeAuthentication() {\n    if (localStorage.getItem('token') !== null) {\n      window.localStorage.clear();\n      this.isAuthenticated.next(false);\n    }\n  }\n  register(user) {\n    return this.http.post(this.authUrl + \"/user\", user);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","BehaviorSubject","jwt","require","AuthService","constructor","http","router","authUrl","isAuthenticated","options","headers","next","login","username","password","post","getToken","localStorage","getItem","getIsAuthenticated","asObservable","setAuthenticated","token","userToken","console","log","setItem","removeAuthentication","window","clear","register","user","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Georgie\\Desktop\\DevelopmentProjects\\FullStack\\MEAN\\movie4you\\frontend\\src\\app\\security\\auth-service.service.ts"],"sourcesContent":["import { HttpBackend, HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, map, observable, Observable, Subject } from 'rxjs';\nimport { tap } from 'rxjs';\nimport { User } from '../models/user';\nconst jwt = require('jsonwebtoken');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private authUrl: string = \"http://localhost:3000\";\n\n  private isAuthenticated = new BehaviorSubject<boolean>(false);\n\n  private options = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(private http: HttpClient, private router: Router){\n    this.isAuthenticated.next(false);\n  }\n\n\n  login(username:string, password:string): Observable<any>{\n    return this.http.post<any>(this.authUrl + \"/login\", {username,password}, this.options);\n  }\n\n  getToken(): any {\n    return localStorage.getItem('token');\n  }\n\n  getIsAuthenticated():Observable<boolean>{\n    return this.isAuthenticated.asObservable();\n  }\n\n  setAuthenticated(token: string){\n    if(token !==null){\n      const userToken =  token;\n      console.log(userToken);\n      localStorage.setItem('token', token);\n      console.log(token);\n      this.isAuthenticated.next(true);\n    }\n  }\n\n  removeAuthentication(){\n    if(localStorage.getItem('token') !==null){\n     window.localStorage.clear();\n     this.isAuthenticated.next(false);\n    }\n  }\n\n  register(user: User): Observable<any>{\n    return this.http.post<User>(this.authUrl + \"/user\", user );\n  }\n}\n"],"mappings":"AAAA,SAAkCA,WAAW,QAAQ,sBAAsB;AAG3E,SAASC,eAAe,QAA8C,MAAM;;;;AAG5E,MAAMC,GAAG,GAAGC,OAAO,CAAC,cAAc,CAAC;AAKnC,OAAM,MAAOC,WAAW;EAUtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAR5C,KAAAC,OAAO,GAAW,uBAAuB;IAEzC,KAAAC,eAAe,GAAG,IAAIR,eAAe,CAAU,KAAK,CAAC;IAErD,KAAAS,OAAO,GAAG;MAChBC,OAAO,EAAE,IAAIX,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;IAGC,IAAI,CAACS,eAAe,CAACG,IAAI,CAAC,KAAK,CAAC;EAClC;EAGAC,KAAKA,CAACC,QAAe,EAAEC,QAAe;IACpC,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAM,IAAI,CAACR,OAAO,GAAG,QAAQ,EAAE;MAACM,QAAQ;MAACC;IAAQ,CAAC,EAAE,IAAI,CAACL,OAAO,CAAC;EACxF;EAEAO,QAAQA,CAAA;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAC,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACX,eAAe,CAACY,YAAY,EAAE;EAC5C;EAEAC,gBAAgBA,CAACC,KAAa;IAC5B,IAAGA,KAAK,KAAI,IAAI,EAAC;MACf,MAAMC,SAAS,GAAID,KAAK;MACxBE,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;MACtBN,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEJ,KAAK,CAAC;MACpCE,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;MAClB,IAAI,CAACd,eAAe,CAACG,IAAI,CAAC,IAAI,CAAC;;EAEnC;EAEAgB,oBAAoBA,CAAA;IAClB,IAAGV,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,KAAI,IAAI,EAAC;MACxCU,MAAM,CAACX,YAAY,CAACY,KAAK,EAAE;MAC3B,IAAI,CAACrB,eAAe,CAACG,IAAI,CAAC,KAAK,CAAC;;EAEnC;EAEAmB,QAAQA,CAACC,IAAU;IACjB,OAAO,IAAI,CAAC1B,IAAI,CAACU,IAAI,CAAO,IAAI,CAACR,OAAO,GAAG,OAAO,EAAEwB,IAAI,CAAE;EAC5D;;AA9CW5B,WAAW,C;mBAAXA,WAAW,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAXlC,WAAW,C;SAAXA,WAAW;EAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}