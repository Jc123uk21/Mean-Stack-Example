{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class LoadingService {\n  constructor() {\n    this.isLoading = new BehaviorSubject(false);\n    this.loading = this.isLoading.asObservable();\n  }\n  showLoading() {\n    this.isLoading.next(true);\n  }\n  hideLoading() {\n    this.isLoading.next(false);\n  }\n}\nLoadingService.ɵfac = function LoadingService_Factory(t) {\n  return new (t || LoadingService)();\n};\nLoadingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoadingService,\n  factory: LoadingService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","LoadingService","constructor","isLoading","loading","asObservable","showLoading","next","hideLoading","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Georgie\\Desktop\\DevelopmentProjects\\FullStack\\MEAN\\movie4you\\frontend\\src\\app\\services\\loading.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoadingService {\n\n  private isLoading = new BehaviorSubject<boolean>(false);\n  public readonly loading = this.isLoading.asObservable();\n\n  constructor() { }\n\n  showLoading(){\n    this.isLoading.next(true);\n  }\n\n  hideLoading(){\n    this.isLoading.next(false);\n  }\n}\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAMtC,OAAM,MAAOC,cAAc;EAKzBC,YAAA;IAHQ,KAAAC,SAAS,GAAG,IAAIH,eAAe,CAAU,KAAK,CAAC;IACvC,KAAAI,OAAO,GAAG,IAAI,CAACD,SAAS,CAACE,YAAY,EAAE;EAEvC;EAEhBC,WAAWA,CAAA;IACT,IAAI,CAACH,SAAS,CAACI,IAAI,CAAC,IAAI,CAAC;EAC3B;EAEAC,WAAWA,CAAA;IACT,IAAI,CAACL,SAAS,CAACI,IAAI,CAAC,KAAK,CAAC;EAC5B;;AAbWN,cAAc,C;mBAAdA,cAAc;AAAA;AAAdA,cAAc,C;SAAdA,cAAc;EAAAQ,OAAA,EAAdR,cAAc,CAAAS,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}